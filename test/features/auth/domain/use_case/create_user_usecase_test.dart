import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
import 'package:moments/core/error/failure.dart';
import 'package:moments/features/auth/domain/entity/user_entity.dart';
import 'package:moments/features/auth/domain/repository/user_repository.dart';
import 'package:moments/features/auth/domain/use_case/create_user_usecase.dart';

class MockUserRepository extends Mock implements IUserRepository {}

void main() {
  late MockUserRepository mockUserRepository;
  late CreateUserUsecase createUserUsecase;

  // Register fallback value for UserEntity
  setUpAll(() {
    registerFallbackValue(UserEntity(
      userId: null,
      email: 'test@example.com',
      username: 'testUser',
      password: 'password123',
      image: null,
      bio: null,
      verified: null,
    ));
  });

  setUp(() {
    mockUserRepository = MockUserRepository();
    createUserUsecase = CreateUserUsecase(userRepository: mockUserRepository);
  });

  final tCreateUserParams = CreateUserParams(
    email: 'test@example.com',
    username: 'testUser',
    password: 'password123',
  );

  final tUserEntity = UserEntity(
    userId: null, // Assuming userId is generated by the repository
    email: tCreateUserParams.email,
    username: tCreateUserParams.username,
    password: tCreateUserParams.password,
    image: null,
    bio: null,
    verified: null,
  );

  test('should create a user and return a success response', () async {
    // Arrange
    when(() => mockUserRepository.createUser(any()))
        .thenAnswer((_) async => const Right(null));

    // Act
    final result = await createUserUsecase(tCreateUserParams);

    // Assert
    expect(result, const Right(null));  // Expect success response (Right)
    verify(() => mockUserRepository.createUser(tUserEntity)).called(1);
    verifyNoMoreInteractions(mockUserRepository);
  });
test('should return failure when user creation fails', () async {
  // Arrange
  final params = CreateUserParams(
    email: 'test@example.com',
    username: 'testuser',
    password: 'password123',
  );
  final failure = ApiFailure(message: 'Error creating user', statusCode: 500);
  when(() => mockUserRepository.createUser(any())).thenAnswer(
    (_) async => Left(failure),
  );

  // Act
  final result = await createUserUsecase(params);

  // Assert
  expect(result, Left<ApiFailure, void>(failure));  // Fix the expected type
});
}
